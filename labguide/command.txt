kubectl create configmap cmvolume --from-literal=var8=val8 --from-literal=var9=val9
kubectl run nginx --image=nginx --restart=Never --dry-run -o yaml > pod.yaml

envFrom:
 configMapRef:
  name:cmvolume

kubectl get pod <pod-name> -o yaml > pod-definition.yaml
kubectl edit pod <pod-name>

kubectl run busybox --image=busybox --restart=Never -o yaml --dry-run -- /bin/sh -c 'sleep 3600' > pod.yaml

Connect to the second container:
kubectl exec -it busybox -c busybox2 -- /bin/sh
cat /etc/passwd | cut -f 1 -d ':' > /etc/foo/passwd 
cat /etc/foo/passwd # confirm that stuff has been written successfully
exit

kubectl exec -it busybox -c busybox -- /bin/sh
mount | grep foo # confirm the mounting
cat /etc/foo/passwd
exit
kubectl delete po busybox

Connect to the pod and copy '/etc/passwd' to '/etc/foo/passwd':
kubectl exec busybox -it -- cp /etc/passwd /etc/foo/passwd

kubectl run busybox --image=busybox --restart=Never -- sleep 3600
kubectl cp busybox:/etc/passwd ./passwd # kubectl cp command
# previous command might report an error, feel free to ignore it since copy command works
cat passwd

kubectl run nginx --image=nginx --restart=Never --port=80 --expose

Confirm that ClusterIP has been created. Also check endpoints
kubectl get svc nginx # services
kubectl get ep # endpoints

tmp pod
kubectl run busybox --rm --image=busybox -it --restart=Never -- sh
wget -O- IP:80
exit

kubectl run foo --image=dgkanatsios/simpleapp --labels=app=foo --port=8080 --replicas=3
kubectl expose deploy foo --port=6262 --target-port=8080
kubectl get service foo # you will see ClusterIP as well as port 6262
kubectl get endpoints foo #

kubectl get svc # get the foo service ClusterIP
kubectl run busybox --image=busybox -it --rm --restart=Never -- sh
wget -O- foo:6262 # DNS works! run it many times, you'll see different pods responding
wget -O- SERVICE_CLUSTER_IP:6262 # ClusterIP works as well
# you can also kubectl logs on deployment pods to see the container logs
kubectl delete svc foo
kubectl delete deploy foo


kubectl describe pod nginx | grep -i liveness

    livenessProbe: 
      initialDelaySeconds: 5 # add this line
      periodSeconds: 10 # add this line as well
      exec:
        command:
        - ls
		
		
kubectl run busybox --image=busybox --restart=Never -- /bin/sh -c 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'
kubectl logs busybox -f # follow the logs

kubectl get events | grep -i error # you'll see the error here as well
kubectl run busybox --restart=Never --image=busybox -- /bin/sh -c 'ls /notexist'

kubectl delete po busybox --force --grace-period=0  delete the pod forcefully with a 0 grace period

kubectl create configmap config --from-literal=foo=lala --from-literal=foo2=lolo

kubectl get cm config -o yaml --export
kubectl describe cm config

   securityContext: # insert this line
      capabilities: # and this
        add: ["NET_ADMIN", "SYS_TIME"] # this as well
		
		spec:
  securityContext: # insert this line
    runAsUser: 101 # UID for the user
	
	
kubectl create -f pod.yaml
kubectl exec -it nginx /bin/bash
ls /etc/foo  # shows username
cat /etc/foo/username # shows admin

  containers:
  - image: nginx
    imagePullPolicy: IfNotPresent
    name: nginx
    resources: {}
    env: # our env variables
    - name: USERNAME # asked name
      valueFrom:
        secretKeyRef: # secret reference
          name: mysecret2 # our secret's name
          key: username # the key of the data in the secret
	
	

kubectl get sa --all-namespaces
kubectl create sa myuser
# let's get a template easily
kubectl get sa default -o yaml --export > sa.yaml
vim sa.yaml

kubectl run nginx1 --image=nginx --restart=Never --labels=app=v1
kubectl get po --show-labels
kubectl label po nginx2 app=v2 --overwrite
kubectl get po -L app
kubectl get po -l app=v2
kubectl label po nginx1 nginx2 nginx3 app-

kubectl annotate po nginx1 nginx2 nginx3 description='my description'
kubectl annotate po nginx{1..3} description-


kubectl describe deploy nginx # you'll see the name of the replica set on the Events section and in the 'NewReplicaSet' property
# OR you can find rs directly by:
kubectl get rs -l run=nginx # if you created deployment by 'run' command
kubectl get rs -l app=nginx # if you created deployment by 'create' command
# you could also just do kubectl get rs
kubectl get rs nginx-7bf7478b77 -o yaml
kubectl rollout history deploy nginx
kubectl rollout undo deploy nginx

kubectl rollout undo deploy nginx --to-revision=2

kubectl rollout history deploy nginx --revision=4

kubectl scale deploy nginx --replicas=5

kubectl autoscale deploy nginx --min=5 --max=10 --cpu-percent=80

kubectl rollout pause deploy nginx

kubectl delete deploy nginx
kubectl delete hpa nginx-- horizontal pod autoscaler you created

kubectl create job pi  --image=perl -- perl -Mbignum=bpi -wle 'print bpi(2000)'

kubectl create job busybox --image=busybox -- /bin/sh -c 'echo hello;sleep 30;echo world'


spec:
  activeDeadlineSeconds: 30 # add this line
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: busybox
    spec:
	
	

kubectl create cronjob busybox --image=busybox --schedule="*/1 * * * *" -- /bin/sh -c 'date; echo Hello from the Kubernetes cluster'



kubectl create -f pod.yaml
# Connect to the busybox2 container within the pod
kubectl exec -it busybox -c busybox2 -- /bin/sh
ls
exit

# or you can do the above with just an one-liner
kubectl exec -it busybox -c busybox2 -- ls

# you can do some cleanup
kubectl delete po busybox

kubectl run busybox --image=busybox --command --restart=Never -it -- env 
kubectl run nginx --image=nginx --restart=Never --dry-run -o yaml > pod.yaml

kubectl run busybox --image=busybox --command --restart=Never -it -- env # -it will help in seeing the output
# or, just run it without -it
kubectl run busybox --image=busybox --command --restart=Never -- env

# create a  YAML template with this command
kubectl run busybox --image=busybox --restart=Never --dry-run -o yaml --command -- env > envpod.yaml
# see it
cat envpod.yaml
# apply it and then see the logs
kubectl apply -f envpod.yaml
kubectl logs busybox

kubectl create namespace myns -o yaml --dry-run
kubectl create quota myrq --hard=cpu=1,memory=1G,pods=2 --dry-run -o yaml
kubectl get po --all-namespaces


kubectl set image pod/nginx nginx=nginx:1.7.1
kubectl describe po nginx # you will see an event 'Container will be killed and recreated'
kubectl get po nginx -w # watch it

kubectl logs nginx -p -->get logs about the previous instance
kubectl exec -it nginx -- /bin/sh-->Execute a simple shell on the nginx pod

kubectl run busybox --image=busybox -it --restart=Never -- /bin/sh -c 'echo hello world' -->busybox pod that echoes 'hello world' and then exits

kubectl run nginx --image=nginx --restart=Never --env=var1=val1

kubectl run nginx --image=nginx --restart=Never --env=var1=val1
# then
kubectl exec -it nginx -- env
# or
kubectl describe po nginx | grep val1

